/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  Mutation: {};
  Pattern: { // root type
    description?: string | null; // String
    id?: number | null; // Int
    name?: string | null; // String
    score?: string | null; // String
  }
  Query: {};
  Record: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id?: number | null; // Int
    patternId?: number | null; // Int
    rating?: number | null; // Int
    tempo?: number | null; // Int
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createPattern: NexusGenRootTypes['Pattern'] | null; // Pattern
    createRecord: NexusGenRootTypes['Record'] | null; // Record
    deletePattern: NexusGenRootTypes['Pattern'] | null; // Pattern
    deleteRecord: NexusGenRootTypes['Record'] | null; // Record
  }
  Pattern: { // field return type
    description: string | null; // String
    id: number | null; // Int
    name: string | null; // String
    score: string | null; // String
  }
  Query: { // field return type
    pattern: NexusGenRootTypes['Pattern'] | null; // Pattern
    patterns: Array<NexusGenRootTypes['Pattern'] | null> | null; // [Pattern]
    records: Array<NexusGenRootTypes['Record'] | null> | null; // [Record]
  }
  Record: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: number | null; // Int
    pattern: NexusGenRootTypes['Pattern'] | null; // Pattern
    patternId: number | null; // Int
    rating: number | null; // Int
    tempo: number | null; // Int
  }
}

export interface NexusGenFieldTypeNames {
  Mutation: { // field return type name
    createPattern: 'Pattern'
    createRecord: 'Record'
    deletePattern: 'Pattern'
    deleteRecord: 'Record'
  }
  Pattern: { // field return type name
    description: 'String'
    id: 'Int'
    name: 'String'
    score: 'String'
  }
  Query: { // field return type name
    pattern: 'Pattern'
    patterns: 'Pattern'
    records: 'Record'
  }
  Record: { // field return type name
    createdAt: 'DateTime'
    id: 'Int'
    pattern: 'Pattern'
    patternId: 'Int'
    rating: 'Int'
    tempo: 'Int'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createPattern: { // args
      description?: string | null; // String
      name: string; // String!
      score: string; // String!
    }
    createRecord: { // args
      patternId: string; // String!
      rating: number; // Int!
      tempo: number; // Int!
    }
    deletePattern: { // args
      patternId: number; // Int!
    }
    deleteRecord: { // args
      recordId: number; // Int!
    }
  }
  Query: {
    pattern: { // args
      id: string; // String!
    }
    records: { // args
      patternId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}